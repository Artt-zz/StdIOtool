#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.5 on Thu Oct 02 14:00:23 2008 from Q:\Sync\Python\StdInOut\IOcommand.wxg

import wx
import pickle
import os, os.path
import sys, optparse

from ProportionalSplitter import ProportionalSplitter
import threading
from threading import Thread

try:
  from subprocess import Popen, PIPE
  UseSubprocess = 1
except:
  UseSubprocess = 0

wxEVT_CALLBACK = wx.NewEventType()

class NewDataEvent(wx.PyEvent):
     def __init__(self, data):
         wx.PyEvent.__init__(self)
         self.SetEventType(wxEVT_CALLBACK)
         self.Data = data

class WriteThread (Thread) :
  def __init__ (self, data, g) :
    Thread.__init__(self)
    self.data = data
    self.g = g
  def run(self) :
#    try :
       #N = 65536
       N = len(self.data)
       while self.data :
         self.g.write(self.data[0:N])
         self.data = self.data[N:]
       self.g.close()
#    except :
#       pass

class ReadThread (Thread) :
  def __init__ (self, f, callback, ID, DoBuffer) :
    Thread.__init__(self)
    self.data = ""
    self.f = f
    self.callback = callback
    self.ID = ID
    self.DoBuffer = DoBuffer
    self.Buffer = ''
  def run(self) :
    try :
        #self.callback((self.ID, "*** START ***\n"))

        if self.DoBuffer :
          L = self.f.read(65536)
          while L:
            self.Buffer += L
            L = self.f.read(65536)
          self.callback ((self.ID, ("Data", self.Buffer)))
        else :
          L = self.f.readline()
          while L:
            self.callback ((self.ID, ("Data", L)))
            L = self.f.readline()

        #self.callback((self.ID, "*** END ***\n"))
        self.f.close()
    finally:
        self.callback ((self.ID, ("Info", "Terminated")))
#    except :
#       pass

class MyFrame(wx.Frame):
    def __init__(self, argv, *args, **kwds):

        self.ParseOptions (argv)

        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        #self.window_2 = wx.SplitterWindow(self.panel_1, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_2 = ProportionalSplitter(self.panel_1, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_2_pane_2 = wx.Panel(self.window_2, -1)
        self.window_2_pane_1 = wx.Panel(self.window_2, -1)
        #self.window_1 = wx.SplitterWindow(self.window_2_pane_1, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1 = ProportionalSplitter(self.window_2_pane_1, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.sizer_7_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Output (stdout)")
        self.sizer_13_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Description")
        self.sizer_14_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Command")
        self.sizer_15_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Options")
        self.sizer_11_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Settings")
        self.sizer_9_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Command")
        self.sizer_4_staticbox = wx.StaticBox(self.window_2_pane_2, -1, "Messages (stderr)")
        self.sizer_8_staticbox = wx.StaticBox(self.window_1_pane_1, -1, " Input (stdin)")

        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        self.SetMenuBar(self.frame_1_menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(101, "&Quit", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(102, "Select &all\tCtrl-A", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Edit")
        # Menu Bar end
        self.button_stdin_clear = wx.Button(self.window_1_pane_1, -1, "Clear")
        self.button_stdin_copy = wx.Button(self.window_1_pane_1, -1, "Copy")
        self.button_stdin_paste = wx.Button(self.window_1_pane_1, -1, "Paste")
        self.text_ctrl_stdin = wx.TextCtrl(self.window_1_pane_1, -1, "", style=wx.TE_MULTILINE)
        self.button_stdout_clear = wx.Button(self.window_1_pane_2, -1, "Clear")
        self.button_stdout_copy = wx.Button(self.window_1_pane_2, -1, "Copy")
        self.text_ctrl_stdout = wx.TextCtrl(self.window_1_pane_2, -1, "", style=wx.TE_MULTILINE)
        self.combo_box_1 = wx.ComboBox(self.window_2_pane_2, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_READONLY|wx.CB_SORT)
        self.button_1 = wx.Button(self.window_2_pane_2, -1, "Go!")
        self.button_stop = wx.Button(self.window_2_pane_2, -1, "Kill")
        self.text_ctrl_desc = wx.TextCtrl(self.window_2_pane_2, -1, "", style=wx.TE_MULTILINE)
        self.text_ctrl_cmd = wx.TextCtrl(self.window_2_pane_2, -1, "", style=wx.TE_MULTILINE)
        self.checkbox_1 = wx.CheckBox(self.window_2_pane_2, -1, "Execute via shell")
        self.checkbox_2 = wx.CheckBox(self.window_2_pane_2, -1, "Buffer stdout")
        self.checkbox_3 = wx.CheckBox(self.window_2_pane_2, -1, "Buffer stderr")
        self.button_3 = wx.Button(self.window_2_pane_2, -1, "Save")
        self.button_4 = wx.Button(self.window_2_pane_2, -1, "Delete")
        self.button_2 = wx.Button(self.window_2_pane_2, -1, "New")
        self.button_stderr_clear = wx.Button(self.window_2_pane_2, -1, "Clear")
        self.button_stderr_copy = wx.Button(self.window_2_pane_2, -1, "Copy")
        self.text_ctrl_stderr = wx.TextCtrl(self.window_2_pane_2, -1, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.evtMenuQuit, id=101)
        self.Bind(wx.EVT_MENU, self.evtMenuSelectAll, id=102)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stdin_clear, self.button_stdin_clear)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stdin_copy, self.button_stdin_copy)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stdin_paste, self.button_stdin_paste)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stdout_clear, self.button_stdout_clear)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stdout_copy, self.button_stdout_copy)
        self.Bind(wx.EVT_COMBOBOX, self.evtComboBox, self.combo_box_1)
        self.Bind(wx.EVT_BUTTON, self.evtGo, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stop, self.button_stop)
        self.Bind(wx.EVT_BUTTON, self.evtSave, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.evtDelete, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.evtNew, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stderr_clear, self.button_stderr_clear)
        self.Bind(wx.EVT_BUTTON, self.evtButton_stderr_copy, self.button_stderr_copy)
        # end wxGlade

        self.StopEvent = threading.Event()
        self.Connect(-1, -1, wxEVT_CALLBACK, self.onCallbackEvent)

        #If the subprocess module is not available, then disable the 'Exec via shell' checkbox
        if not UseSubprocess :
          self.checkbox_1.Enable(False)

        self.Running_stdout = False
        self.Running_stderr = False

        # Remove length limits on input/output
        self.text_ctrl_stdin.SetMaxLength(0)
        self.text_ctrl_stdout.SetMaxLength(0)
        self.LoadCommands()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("IO commandline GUI tool")
        self.button_stdin_clear.SetMinSize((40, 20))
        self.button_stdin_clear.SetToolTipString("Clears contents of stdin window")
        self.button_stdin_copy.SetMinSize((40, 20))
        self.button_stdin_copy.SetToolTipString("Copy contents of stdin window to clipboard")
        self.button_stdin_paste.SetMinSize((40, 20))
        self.button_stdin_paste.SetToolTipString("Clears stdin window, then pastes from clipboard")
        self.text_ctrl_stdin.SetToolTipString("The contents of this window will be copied to the command's stdin")
        self.button_stdout_clear.SetMinSize((40, 20))
        self.button_stdout_clear.SetToolTipString("Clears contents of stdout window")
        self.button_stdout_copy.SetMinSize((40, 20))
        self.button_stdout_copy.SetToolTipString("Copy contents of stdout window to clipboard")
        self.text_ctrl_stdout.SetToolTipString("This window captures all of the command's output to stdout")
        self.button_stop.Enable(False)
        self.checkbox_1.SetToolTipString("When checked, a shell is started, and your command is fed to it.\nAdvantage: Enables shell-functionality (such as pipes) in your commands.\nDisadvantage: Killing a shell running a command will not terminate the command, but only the shell.")
        self.checkbox_2.SetToolTipString("Large amounts of output can cause delays in updating the Output window. Checking this box will buffer all collected output first. This causes the Output window to remain empty until the command has finished executing.")
        self.checkbox_3.SetToolTipString("Large amounts of output can cause delays in updating the Std window. Checking this box will buffer all collected output first. This causes the Output window to remain empty until the command has finished executing.")
        self.button_stderr_clear.SetMinSize((40, 20))
        self.button_stderr_clear.SetToolTipString("Clears contents of stderr window")
        self.button_stderr_copy.SetMinSize((40, 20))
        self.button_stderr_copy.SetToolTipString("Copy contents of stderr window to clipboard")
        self.text_ctrl_stderr.SetToolTipString("This window captures all of the command's output to stderr")
        self.panel_1.SetMinSize((600,500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.VERTICAL)
        sizer_16_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.StaticBoxSizer(self.sizer_11_staticbox, wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.StaticBoxSizer(self.sizer_14_staticbox, wx.HORIZONTAL)
        sizer_13 = wx.StaticBoxSizer(self.sizer_13_staticbox, wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.VERTICAL)
        sizer_16_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add((0, 0), 1, 0, 0)
        sizer_16.Add(self.button_stdin_clear, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_16.Add(self.button_stdin_copy, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_16.Add(self.button_stdin_paste, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_8.Add(sizer_16, 0, wx.EXPAND, 0)
        sizer_8.Add(self.text_ctrl_stdin, 1, wx.ALL|wx.EXPAND, 10)
        self.window_1_pane_1.SetSizer(sizer_8)
        sizer_16_copy.Add((0, 0), 1, 0, 0)
        sizer_16_copy.Add(self.button_stdout_clear, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_16_copy.Add(self.button_stdout_copy, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_7.Add(sizer_16_copy, 0, wx.EXPAND, 0)
        sizer_7.Add(self.text_ctrl_stdout, 1, wx.ALL|wx.EXPAND, 10)
        self.window_1_pane_2.SetSizer(sizer_7)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        sizer_3.Add(self.window_1, 1, wx.EXPAND, 0)
        self.window_2_pane_1.SetSizer(sizer_3)
        sizer_6.Add(self.combo_box_1, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
        sizer_6.Add(self.button_1, 0, wx.LEFT|wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_6.Add(self.button_stop, 0, wx.LEFT, 2)
        sizer_10.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_13.Add(self.text_ctrl_desc, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_14.Add(self.text_ctrl_cmd, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_15.Add(self.checkbox_1, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17.Add(self.checkbox_2, 0, 0, 0)
        sizer_17.Add(self.checkbox_3, 0, 0, 0)
        sizer_15.Add(sizer_17, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_15, 0, wx.EXPAND, 0)
        sizer_12.Add(self.button_3, 0, wx.TOP|wx.BOTTOM, 10)
        sizer_12.Add((0, 0), 1, 0, 0)
        sizer_12.Add(self.button_4, 0, wx.TOP|wx.BOTTOM, 10)
        sizer_12.Add(self.button_2, 0, wx.LEFT|wx.TOP|wx.BOTTOM, 10)
        sizer_11.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_9.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_16_copy_copy.Add((0, 0), 1, 0, 0)
        sizer_16_copy_copy.Add(self.button_stderr_clear, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_16_copy_copy.Add(self.button_stderr_copy, 0, wx.LEFT|wx.RIGHT, 1)
        sizer_4.Add(sizer_16_copy_copy, 0, wx.EXPAND, 0)
        sizer_4.Add(self.text_ctrl_stderr, 1, wx.ALL|wx.EXPAND, 10)
        sizer_5.Add(sizer_4, 1, wx.EXPAND, 0)
        self.window_2_pane_2.SetSizer(sizer_5)
        self.window_2.SplitHorizontally(self.window_2_pane_1, self.window_2_pane_2)
        sizer_2.Add(self.window_2, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def LoadCommands(self) :
        try :
          (Size, SelectIndex, self.CommandList) = pickle.load(file(self.SettingsFilename,'rb'))
          os.chdir(os.path.dirname(self.SettingsFilename))
        except:
          self.CommandList = {}
          Size = (500,500)
          SelectIndex = -1

        self.combo_box_1.Clear()
        for i in self.CommandList.keys() :
            self.combo_box_1.Append(i)
        if SelectIndex >= 0 :
            self.combo_box_1.SetSelection(SelectIndex)
        self.SetSize(Size)
        self.Layout()
        self.evtComboBox(None)

    def SaveCommands(self) :
        try :
          Size = self.GetSize()
          SelectIndex = self.combo_box_1.GetSelection()
          pickle.dump((Size, SelectIndex, self.CommandList), file(self.SettingsFilename,'wb'))
        except:
          pass

    def evtGo(self, event): # wxGlade: MyFrame.<event_handler>
        cmd = self.text_ctrl_cmd.GetValue()
        Opt_Shell = self.checkbox_1.GetValue()

        self.text_ctrl_stdout.SetValue('')
        self.text_ctrl_stderr.SetValue('')

        if UseSubprocess :
          p = Popen(cmd, shell=Opt_Shell, bufsize=65536, stdin=PIPE, stdout=PIPE, stderr=PIPE)
          (child_stdin, child_stdout, child_stderr) = (p.stdin, p.stdout, p.stderr)
          self.SubProcess = p
          self.button_stop.Enable()
          self.SetTitle('IO commandline GUI tool - Running...')
        else :
          (child_stdin, child_stdout, child_stderr) = os.popen3(cmd, bufsize=65536)

        self.Running_stdout = True
        self.Running_stderr = True

        W = WriteThread(str(self.text_ctrl_stdin.GetValue().encode('latin-1')), child_stdin)
        R = ReadThread(child_stdout, self.Callback, 'stdout', self.checkbox_2.GetValue())
        R2 = ReadThread(child_stderr, self.Callback, 'stderr', self.checkbox_3.GetValue())
        ThreadList = [W,R,R2]
        for t in ThreadList :
           t.start()

    def evtComboBox(self, event): # wxGlade: MyFrame.<event_handler>
        Filled = 0
        if self.combo_box_1.GetSelection() >= 0 :
            name = self.combo_box_1.GetValue()
            if self.CommandList.has_key(name) :
              self.text_ctrl_cmd.SetValue(self.CommandList[name]['Command'])
              try :
                 self.text_ctrl_desc.SetValue(self.CommandList[name]['Description'])
              except :
                 self.text_ctrl_desc.SetValue('')
              try :
                 self.checkbox_1.SetValue(self.CommandList[name]['Options_Shell'])
              except :
                 self.checkbox_1.SetValue(0)
              try :
                 self.checkbox_2.SetValue(self.CommandList[name]['Options_BufferStdout'])
              except :
                 self.checkbox_2.SetValue(0)
              try :
                 self.checkbox_3.SetValue(self.CommandList[name]['Options_BufferStderr'])
              except :
                 self.checkbox_3.SetValue(0)

    def evtDelete(self, event): # wxGlade: MyFrame.<event_handler>
        ShortName = self.text_ctrl_desc.GetValue().split('\n')[0].strip()
        if self.CommandList.has_key(ShortName) :
          del self.CommandList[ShortName]
          i=0
          while i < self.combo_box_1.GetCount() :
            if self.combo_box_1.GetString(i) == ShortName :
                self.combo_box_1.Delete(i)
            else:
                i += 1
          self.SaveCommands()
          self.evtComboBox(None)

    def evtSave(self, event): # wxGlade: MyFrame.<event_handler>
        Desc = self.text_ctrl_desc.GetValue()
        Cmd = self.text_ctrl_cmd.GetValue()
        Opt_Shell = self.checkbox_1.GetValue()
        Opt_BufferStdout = self.checkbox_2.GetValue()
        Opt_BufferStderr = self.checkbox_3.GetValue()

        ShortName = Desc.split('\n')[0].strip()
        if not self.CommandList.has_key(ShortName) :
           self.combo_box_1.Append(ShortName)
        self.CommandList[ShortName] = {'Description': Desc, 'Command': Cmd, 'Options_Shell': Opt_Shell, 'Options_BufferStdout': Opt_BufferStdout, 'Options_BufferStderr': Opt_BufferStderr}
        self.SaveCommands()
        self.combo_box_1.SetValue(ShortName)
        self.combo_box_1.SetFocus()

    def evtNew(self, event): # wxGlade: MyFrame.<event_handler>
        self.text_ctrl_desc.SetValue('')
        self.text_ctrl_cmd.SetValue('')
        self.combo_box_1.SetSelection(-1)


    def evtMenuSelectAll(self, event): # wxGlade: MyFrame.<event_handler>
        CurrentFocus = self.FindFocus()
        if CurrentFocus.GetClassName() == 'wxTextCtrl' :
          CurrentFocus.SetSelection(-1, -1)

    def evtMenuQuit(self, event): # wxGlade: MyFrame.<event_handler>
        self.Close()

    def Callback(self, data) :
        wx.PostEvent(self, NewDataEvent(data))

    def onCallbackEvent(self, evt) :
        Type, Parms = evt.Data
        if Type == 'stdout' :
            if Parms[0] == 'Data' :
              self.text_ctrl_stdout.AppendText(Parms[1].decode('latin-1'))
            elif Parms[0] == 'Info' :
              if Parms[1] == 'Terminated' :
                self.Running_stdout = False
        elif Type == 'stderr' :
            if Parms[0] == 'Data' :
              self.text_ctrl_stderr.AppendText(Parms[1].decode('latin-1'))
            elif Parms[0] == 'Info' :
              if Parms[1] == 'Terminated' :
                self.Running_stderr = False
        if (not self.Running_stdout) and (not self.Running_stderr) :
          self.button_stop.Enable(False)
          self.SetTitle('IO commandline GUI tool')

    def evtButton_stop(self, event): # wxGlade: MyFrame.<event_handler>
        import win32api
        import win32con
        h=win32api.OpenProcess(True, win32con.PROCESS_TERMINATE, self.SubProcess.pid)
        win32api.TerminateProcess(h,-1)

    def evtButton_stdin_copy(self, event): # wxGlade: MyFrame.<event_handler>
        clipdata = wx.TextDataObject()
        clipdata.SetText(self.text_ctrl_stdin.GetValue())
        wx.TheClipboard.Open()
        wx.TheClipboard.SetData(clipdata)
        wx.TheClipboard.Close()

    def evtButton_stdin_paste(self, event): # wxGlade: MyFrame.<event_handler>
        do = wx.TextDataObject()
        wx.TheClipboard.Open()
        success = wx.TheClipboard.GetData(do)
        wx.TheClipboard.Close()
        if success:
          self.text_ctrl_stdin.SetValue(do.GetText())

    def evtButton_stdin_clear(self, event): # wxGlade: MyFrame.<event_handler>
        self.text_ctrl_stdin.SetValue('')

    def evtButton_stdout_copy(self, event): # wxGlade: MyFrame.<event_handler>
        clipdata = wx.TextDataObject()
        clipdata.SetText(self.text_ctrl_stdout.GetValue())
        wx.TheClipboard.Open()
        wx.TheClipboard.SetData(clipdata)
        wx.TheClipboard.Close()

    def evtButton_stdout_clear(self, event): # wxGlade: MyFrame.<event_handler>
        self.text_ctrl_stdout.SetValue('')

    def evtButton_stderr_copy(self, event): # wxGlade: MyFrame.<event_handler>
        clipdata = wx.TextDataObject()
        clipdata.SetText(self.text_ctrl_stderr.GetValue())
        wx.TheClipboard.Open()
        wx.TheClipboard.SetData(clipdata)
        wx.TheClipboard.Close()

    def evtButton_stderr_clear(self, event): # wxGlade: MyFrame.<event_handler>
        self.text_ctrl_stderr.SetValue('')

    def ParseOptions(self, argv) :
        parser = optparse.OptionParser(conflict_handler="resolve")
        parser.add_option("-c", "--config", dest="configfile", help="Location of command configuration file")

        (options, args) = parser.parse_args(argv[1:])
        if options.configfile :
          self.SettingsFilename = os.path.abspath(options.configfile)
        else :
          self.SettingsFilename = os.path.abspath(os.path.expanduser('~/IO_commands.cfg'))


# end of class MyFrame

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(sys.argv, None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()

